1. Load a dataframe from a csv file (retail csv)
2. print schema and make sure first row which is header in csv file is considered.
3. cast a column from integer to double
4. add a new column which is sum of any 3 numeric columns
5. delete any one of column
6. print logical plan and check above steps will be present
7. print some sample rows 
8. move file from given locationa and again try println sample rows you will get error saying file not found
9. move back file to crct place and cache above dataframe
10. now perform action like count
11. move file from given locationa and again try println sample rows , error wont be thrown now because data is present in memeory
12. filter above rows for only 2013.

perform following on above df

print sum of sales for each ship mode
print sum of sales and discount for each ship mode and category (aggregations => sum sales, sum discount, groupBy => ship mode and category)

write above dataframes to a csv file.

==========================================================================================================================================================================
Solution:
1. Load a dataframe from a csv file (retail csv)

COMMAND:

var df = spark.read.option("inferSchema", "true").option("header", "true").csv("/Users/maithriudupa/Documents/RetailAnalytics_cpy_nulls.csv")

RESULT:

//df: org.apache.spark.sql.DataFrame = [Order_Date: timestamp, Ship_Mode: string ... 19 more fields]
===========================================================================================================================================================================
2. print schema and make sure first row which is header in csv file is considered.

COMMAND: 

df.printSchema()

RESULT:

/*
root
 |-- Order_Date: timestamp (nullable = true)
 |-- Ship_Mode: string (nullable = true)
 |-- Segment: string (nullable = true)
 |-- City: string (nullable = true)
 |-- State: string (nullable = true)
 |-- Country: string (nullable = true)
 |-- Orders_Market: string (nullable = true)
 |-- Orders_Region: string (nullable = true)
 |-- Category: string (nullable = true)
 |-- Sub_Category: string (nullable = true)
 |-- Product_Name: string (nullable = true)
 |-- Sales: double (nullable = true)
 |-- Quantity: integer (nullable = true)
 |-- Discount: double (nullable = true)
 |-- Profit: double (nullable = true)
 |-- Shipping_Cost: double (nullable = true)
 |-- Order_Priority: string (nullable = true)
 |-- Person: string (nullable = true)
 |-- People_Region: string (nullable = true)
 |-- Order_ID: string (nullable = true)
 |-- Market: string (nullable = true)
 */

===========================================================================================================================================================================
3. cast a column from integer to double

COMMAND: 

df = df.withColumn("Quantity", df("Quantity").cast("double"))

RESULT:

//df: org.apache.spark.sql.DataFrame = [Order_Date: timestamp, Ship_Mode: string ... 19 more fields]


COMMAND: 

df.printSchema()

RESULT:

/*
root
 |-- Order_Date: timestamp (nullable = true)
 |-- Ship_Mode: string (nullable = true)
 |-- Segment: string (nullable = true)
 |-- City: string (nullable = true)
 |-- State: string (nullable = true)
 |-- Country: string (nullable = true)
 |-- Orders_Market: string (nullable = true)
 |-- Orders_Region: string (nullable = true)
 |-- Category: string (nullable = true)
 |-- Sub_Category: string (nullable = true)
 |-- Product_Name: string (nullable = true)
 |-- Sales: double (nullable = true)
 |-- Quantity: double (nullable = true)
 |-- Discount: double (nullable = true)
 |-- Profit: double (nullable = true)
 |-- Shipping_Cost: double (nullable = true)
 |-- Order_Priority: string (nullable = true)
 |-- Person: string (nullable = true)
 |-- People_Region: string (nullable = true)
 |-- Order_ID: string (nullable = true)
 |-- Market: string (nullable = true)

 */
===========================================================================================================================================================================
4. add a new column which is sum of any 3 numeric columns

COMMAND: 

 df = df.withColumn("sum", col("_c11") + col("_c12") + col("_c13"))

 RESULT:

 //df: org.apache.spark.sql.DataFrame = [Order_Date: timestamp, Ship_Mode: string ... 20 more fields]


COMMAND: 

 df.printSchema()

 RESULT:

 /*
 root
 |-- Order_Date: timestamp (nullable = true)
 |-- Ship_Mode: string (nullable = true)
 |-- Segment: string (nullable = true)
 |-- City: string (nullable = true)
 |-- State: string (nullable = true)
 |-- Country: string (nullable = true)
 |-- Orders_Market: string (nullable = true)
 |-- Orders_Region: string (nullable = true)
 |-- Category: string (nullable = true)
 |-- Sub_Category: string (nullable = true)
 |-- Product_Name: string (nullable = true)
 |-- Sales: double (nullable = true)
 |-- Quantity: double (nullable = true)
 |-- Discount: double (nullable = true)
 |-- Profit: double (nullable = true)
 |-- Shipping_Cost: double (nullable = true)
 |-- Order_Priority: string (nullable = true)
 |-- Person: string (nullable = true)
 |-- People_Region: string (nullable = true)
 |-- Order_ID: string (nullable = true)
 |-- Market: string (nullable = true)
 |-- sum: double (nullable = true)
 */
===========================================================================================================================================================================
5. delete any one of column

 COMMAND: 

 df = df.drop("People_Region")

 RESULT:

 //df: org.apache.spark.sql.DataFrame = [Order_Date: timestamp, Ship_Mode: string ... 19 more fields]

 COMMAND: 

 df.printSchema()

 RESULT:

 /*
root
 |-- Order_Date: timestamp (nullable = true)
 |-- Ship_Mode: string (nullable = true)
 |-- Segment: string (nullable = true)
 |-- City: string (nullable = true)
 |-- State: string (nullable = true)
 |-- Country: string (nullable = true)
 |-- Orders_Market: string (nullable = true)
 |-- Orders_Region: string (nullable = true)
 |-- Category: string (nullable = true)
 |-- Sub_Category: string (nullable = true)
 |-- Product_Name: string (nullable = true)
 |-- Sales: double (nullable = true)
 |-- Quantity: double (nullable = true)
 |-- Discount: double (nullable = true)
 |-- Profit: double (nullable = true)
 |-- Shipping_Cost: double (nullable = true)
 |-- Order_Priority: string (nullable = true)
 |-- Person: string (nullable = true)
 |-- Order_ID: string (nullable = true)
 |-- Market: string (nullable = true)
 |-- sum: double (nullable = true)


 */
===========================================================================================================================================================================
6. print logical plan and check above steps will be present

COMMAND: 

 df.explain(true)

 RESULT:

 /*

 == Parsed Logical Plan ==
Project [Order_Date#17, Ship_Mode#18, Segment#19, City#20, State#21, Country#22, Orders_Market#23, Orders_Region#24, Category#25, Sub_Category#26, Product_Name#27, Sales#28, Quantity#60, Discount#30, Profit#31, Shipping_Cost#32, Order_Priority#33, Person#34, Order_ID#36, Market#37, sum#82]
+- Project [Order_Date#17, Ship_Mode#18, Segment#19, City#20, State#21, Country#22, Orders_Market#23, Orders_Region#24, Category#25, Sub_Category#26, Product_Name#27, Sales#28, Quantity#60, Discount#30, Profit#31, Shipping_Cost#32, Order_Priority#33, Person#34, People_Region#35, Order_ID#36, Market#37, ((Sales#28 + Quantity#60) + Discount#30) AS sum#82]
   +- Project [Order_Date#17, Ship_Mode#18, Segment#19, City#20, State#21, Country#22, Orders_Market#23, Orders_Region#24, Category#25, Sub_Category#26, Product_Name#27, Sales#28, cast(Quantity#29 as double) AS Quantity#60, Discount#30, Profit#31, Shipping_Cost#32, Order_Priority#33, Person#34, People_Region#35, Order_ID#36, Market#37]
      +- Relation [Order_Date#17,Ship_Mode#18,Segment#19,City#20,State#21,Country#22,Orders_Market#23,Orders_Region#24,Category#25,Sub_Category#26,Product_Name#27,Sales#28,Quantity#29,Discount#30,Profit#31,Shipping_Cost#32,Order_Priority#33,Person#34,People_Region#35,Order_ID#36,Market#37] csv

== Analyzed Logical Plan ==
Order_Date: timestamp, Ship_Mode: string, Segment: string, City: string, State: string, Country: string, Orders_Market: string, Orders_Region: string, Category: string, Sub_Category: string, Product_Name: string, Sales: double, Quantity: double, Discount: double, Profit: double, Shipping_Cost: double, Order_Priority: string, Person: string, Order_ID: string, Market: string, sum: double
Project [Order_Date#17, Ship_Mode#18, Segment#19, City#20, State#21, Country#22, Orders_Market#23, Orders_Region#24, Category#25, Sub_Category#26, Product_Name#27, Sales#28, Quantity#60, Discount#30, Profit#31, Shipping_Cost#32, Order_Priority#33, Person#34, Order_ID#36, Market#37, sum#82]
+- Project [Order_Date#17, Ship_Mode#18, Segment#19, City#20, State#21, Country#22, Orders_Market#23, Orders_Region#24, Category#25, Sub_Category#26, Product_Name#27, Sales#28, Quantity#60, Discount#30, Profit#31, Shipping_Cost#32, Order_Priority#33, Person#34, People_Region#35, Order_ID#36, Market#37, ((Sales#28 + Quantity#60) + Discount#30) AS sum#82]
   +- Project [Order_Date#17, Ship_Mode#18, Segment#19, City#20, State#21, Country#22, Orders_Market#23, Orders_Region#24, Category#25, Sub_Category#26, Product_Name#27, Sales#28, cast(Quantity#29 as double) AS Quantity#60, Discount#30, Profit#31, Shipping_Cost#32, Order_Priority#33, Person#34, People_Region#35, Order_ID#36, Market#37]
      +- Relation [Order_Date#17,Ship_Mode#18,Segment#19,City#20,State#21,Country#22,Orders_Market#23,Orders_Region#24,Category#25,Sub_Category#26,Product_Name#27,Sales#28,Quantity#29,Discount#30,Profit#31,Shipping_Cost#32,Order_Priority#33,Person#34,People_Region#35,Order_ID#36,Market#37] csv

== Optimized Logical Plan ==
Project [Order_Date#17, Ship_Mode#18, Segment#19, City#20, State#21, Country#22, Orders_Market#23, Orders_Region#24, Category#25, Sub_Category#26, Product_Name#27, Sales#28, Quantity#60, Discount#30, Profit#31, Shipping_Cost#32, Order_Priority#33, Person#34, Order_ID#36, Market#37, ((Sales#28 + Quantity#60) + Discount#30) AS sum#82]
+- Project [Order_Date#17, Ship_Mode#18, Segment#19, City#20, State#21, Country#22, Orders_Market#23, Orders_Region#24, Category#25, Sub_Category#26, Product_Name#27, Sales#28, cast(Quantity#29 as double) AS Quantity#60, Discount#30, Profit#31, Shipping_Cost#32, Order_Priority#33, Person#34, Order_ID#36, Market#37]
   +- Relation [Order_Date#17,Ship_Mode#18,Segment#19,City#20,State#21,Country#22,Orders_Market#23,Orders_Region#24,Category#25,Sub_Category#26,Product_Name#27,Sales#28,Quantity#29,Discount#30,Profit#31,Shipping_Cost#32,Order_Priority#33,Person#34,People_Region#35,Order_ID#36,Market#37] csv

== Physical Plan ==
*(1) Project [Order_Date#17, Ship_Mode#18, Segment#19, City#20, State#21, Country#22, Orders_Market#23, Orders_Region#24, Category#25, Sub_Category#26, Product_Name#27, Sales#28, Quantity#60, Discount#30, Profit#31, Shipping_Cost#32, Order_Priority#33, Person#34, Order_ID#36, Market#37, ((Sales#28 + Quantity#60) + Discount#30) AS sum#82]
+- *(1) Project [Order_Date#17, Ship_Mode#18, Segment#19, City#20, State#21, Country#22, Orders_Market#23, Orders_Region#24, Category#25, Sub_Category#26, Product_Name#27, Sales#28, cast(Quantity#29 as double) AS Quantity#60, Discount#30, Profit#31, Shipping_Cost#32, Order_Priority#33, Person#34, Order_ID#36, Market#37]
   +- FileScan csv [Order_Date#17,Ship_Mode#18,Segment#19,City#20,State#21,Country#22,Orders_Market#23,Orders_Region#24,Category#25,Sub_Category#26,Product_Name#27,Sales#28,Quantity#29,Discount#30,Profit#31,Shipping_Cost#32,Order_Priority#33,Person#34,Order_ID#36,Market#37] Batched: false, DataFilters: [], Format: CSV, Location: InMemoryFileIndex(1 paths)[file:/Users/maithriudupa/Documents/RetailAnalytics_cpy_nulls.csv], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<Order_Date:timestamp,Ship_Mode:string,Segment:string,City:string,State:string,Country:stri...
===========================================================================================================================================================================
7. print some sample rows 

COMMAND: 

df.select(df("Ship_Mode"), df("Segment"), df("City")).filter("Segment like 'H%' " ).show(5)

RESULT:

/*

+--------------+-----------+---------+
|     Ship_Mode|    Segment|     City|
+--------------+-----------+---------+
|      Same Day|Home Office| SHENZHEN|
|      Same Day|Home Office| SHENZHEN|
|   First Class|Home Office|MARSEILLE|
|Standard Class|Home Office|HAMAMATSU|
|  Second Class|Home Office|   BURGOS|
+--------------+-----------+---------+
only showing top 5 rows


*/

===========================================================================================================================================================================
8. move file from given locationa and again try println sample rows you will get error saying file not found

COMMAND: 

df.select(df("Ship_Mode"), df("Segment"), df("City")).filter("Segment like 'H%' " ).show(5)

RESULT:

/*

22/10/10 19:35:35 ERROR Executor: Exception in task 0.0 in stage 6.0 (TID 6)
java.io.FileNotFoundException: 
File file:/Users/maithriudupa/Documents/RetailAnalytics_cpy_nulls.csv does not exist

It is possible the underlying files have been updated. You can explicitly invalidate
the cache in Spark by running 'REFRESH TABLE tableName' command in SQL or by
recreating the Dataset/DataFrame involved. 
*/

===========================================================================================================================================================================
9. move back file to crct place and cache above dataframe 

11. move file from given locationa and again try println sample rows , error wont be thrown now because data is present in memeory

COMMAND: 

df.cache


COMMAND: 

df.select(df("Ship_Mode"), df("Segment"), df("City")).filter("Segment like 'H%' " ).show(5)

RESULT:

+--------------+-----------+---------+
|     Ship_Mode|    Segment|     City|
+--------------+-----------+---------+
|      Same Day|Home Office| SHENZHEN|
|      Same Day|Home Office| SHENZHEN|
|   First Class|Home Office|MARSEILLE|
|Standard Class|Home Office|HAMAMATSU|
|  Second Class|Home Office|   BURGOS|
+--------------+-----------+---------+
only showing top 5 rows

===========================================================================================================================================================================
10. now perform action like count

COMMAND: 

df.filter("Segment like 'H%' " ).count()

RESULT:

//res7: Long = 336

===========================================================================================================================================================================
12. filter above rows for only 2013.

COMMAND: 

df.select(df("Order_Date")).filter("Order_Date like '2013%' " ).show()

RESULT:

/*
+-------------------+
|         Order_Date|
+-------------------+
|2013-02-05 05:30:00|
|2013-10-02 05:30:00|
|2013-06-10 05:30:00|
|2013-06-10 05:30:00|
|2013-11-15 05:30:00|
|2013-11-04 05:30:00|
|2013-08-01 05:30:00|
|2013-04-05 05:30:00|
|2013-06-01 05:30:00|
|2013-12-19 05:30:00|
|2013-06-27 05:30:00|
|2013-10-16 05:30:00|
|2013-12-12 05:30:00|
|2013-10-07 05:30:00|
|2013-06-04 05:30:00|
|2013-08-16 05:30:00|
|2013-06-13 05:30:00|
|2013-07-03 05:30:00|
|2013-05-17 05:30:00|
|2013-11-28 05:30:00|
+-------------------+
only showing top 20 rows

*/


===========================================================================================================================================================================
print sum of sales for each ship mode

COMMAND: 

df.groupBy("Ship_Mode").sum("Sales").show(false)

RESULT:

+--------------+------------------+
|Ship_Mode     |sum(Sales)        |
+--------------+------------------+
|First Class   |88085.52150000003 |
|Same Day      |26118.863759999982|
|Second Class  |88966.61812000003 |
|Standard Class|283435.16618000035|
+--------------+------------------+


===========================================================================================================================================================================

print sum of sales and discount for each ship mode and category (aggregations => sum sales, sum discount, groupBy => ship mode and category)

COMMAND: 

> df.groupBy("Ship_Mode","Category").sum("Sales","Discount").show(false)

RESULT:

+--------------+---------------+------------------+------------------+
|Ship_Mode     |Category       |sum(Sales)        |sum(Discount)     |
+--------------+---------------+------------------+------------------+
|Second Class  |Office Supplies|27829.79739999998 |319.3759999999999 |
|Second Class  |Technology     |29806.762619999998|9.274000000000001 |
|Standard Class|Furniture      |88468.94309999996 |34.449999999999974|
|Standard Class|Technology     |105047.14458      |24.517999999999994|
|Standard Class|Office Supplies|89919.0784999999  |99.96000000000016 |
|First Class   |Office Supplies|29211.73399999999 |29.009999999999994|
|Second Class  |Furniture      |31330.058099999995|11.76             |
|First Class   |Technology     |34305.55389999999 |6.952000000000003 |
|Same Day      |Office Supplies|6967.856000000004 |6.200000000000002 |
|Same Day      |Furniture      |10219.730000000001|1.5999999999999999|
|Same Day      |Technology     |8931.277759999999 |0.704             |
|First Class   |Furniture      |24568.233600000003|8.589999999999998 |
+--------------+---------------+------------------+------------------+
===========================================================================================================================================================================
write above dataframes to a csv file.

COMMAND: 

df.write.option("inferSchema", "true").option("header", "true").csv("/Users/maithriudupa/Documents/datacsv")



